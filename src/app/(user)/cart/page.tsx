"use client";

import { useEffect, useState } from "react";
import { getCart, deleteItem, updateItem } from "@/services/cart.service";
import jwt from "jsonwebtoken";
import Image from "next/image";
import styles from "../../../styles/CartPage.module.css";

interface CartItem {
  _id: string;
  quantity: number;
  food: {
    _id: string;
    name: string;
    price: number;
    img: string;
  };
}

export default function CartPage() {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [message, setMessage] = useState("");
  const [accountId, setAccountId] = useState<string | null>(null);
  const [cartId, setCartId] = useState<string | null>(null);
  const [customer, setCustomer] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("On delivery");
  const baseUrl = "http://localhost:5000";

  const getAccountIdFromToken = () => {
    // ƒê·∫£m b·∫£o m√£ n√†y ch·ªâ ch·∫°y tr√™n client-side (trong tr√¨nh duy·ªát)
    const token = typeof window !== 'undefined' ? localStorage.getItem("token") : null;
    if (!token || typeof token !== "string") return null;
    try {
      const decoded: any = jwt.decode(token);
      return decoded?.id || decoded?.account_id;
    } catch (err) {
      console.error("L·ªói gi·∫£i m√£ token:", err);
      return null;
    }
  };

  const encodeImageUrl = (img: string) => {
    if (img?.startsWith("http")) return img;
    if (!img) return "/default-image.jpg"; // Ho·∫∑c m·ªôt ·∫£nh placeholder kh√°c
    const encodedPath = img.replace(/ /g, "%20").replace(/^\/Uploads\//, "/uploads/");
    return `${baseUrl}${encodedPath}`;
  };

  const fetchCart = async () => {
    const accId = getAccountIdFromToken();
    if (!accId) {
      setMessage("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng.");
      return;
    }
    setAccountId(accId);
    try {
      const cart = await getCart(accId);
      // L·ªçc c√°c item c√≥ food l√† null (c√≥ th·ªÉ do m√≥n ƒÉn ƒë√£ b·ªã x√≥a kh·ªèi DB)
      const validItems = (cart.items || []).filter((item: any) => item.food !== null);
      setCartItems(validItems);
      setCartId(cart._id);
      setMessage(""); // X√≥a th√¥ng b√°o l·ªói c≈© n·∫øu fetch th√†nh c√¥ng
    } catch (err) {
      console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", err);
      setMessage("Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.");
      setCartItems([]); // ƒê·∫£m b·∫£o gi·ªè h√†ng tr·ªëng n·∫øu c√≥ l·ªói
    }
  };

  useEffect(() => {
    fetchCart();
  }, []);

  const handleDelete = async (itemId: string) => {
    if (!accountId) {
        setMessage("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a m√≥n.");
        return;
    }
    try {
      await deleteItem(accountId, itemId);
      fetchCart();
      setMessage("M√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng.");
    } catch (error) {
      console.error("L·ªói khi x√≥a m√≥n:", error);
      setMessage("L·ªói khi x√≥a m√≥n. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const handleUpdate = async (itemId: string, quantity: number) => {
    if (!accountId) {
        setMessage("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.");
        return;
    }
    if (quantity < 1) { // Kh√¥ng cho ph√©p s·ªë l∆∞·ª£ng nh·ªè h∆°n 1
        setMessage("S·ªë l∆∞·ª£ng kh√¥ng th·ªÉ nh·ªè h∆°n 1.");
        return;
    }
    try {
      await updateItem(accountId, itemId, quantity);
      fetchCart();
      setMessage(""); // X√≥a th√¥ng b√°o n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
      setMessage("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const handleCheckout = async () => {
    if (!accountId) {
        setMessage("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.");
        return;
    }
    if (!cartItems.length) {
        setMessage("Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m m√≥n ƒÉn v√†o gi·ªè.");
        return;
    }
    if (!cartId) {
        setMessage("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng. Vui l√≤ng th·ª≠ t·∫£i l·∫°i trang.");
        return;
    }
    if (!customer.trim() || !phone.trim() || !address.trim()) {
      setMessage("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng: T√™n, S·ªë ƒëi·ªán tho·∫°i v√† ƒê·ªãa ch·ªâ.");
      return;
    }

    // Basic phone number validation (optional)
    const phoneRegex = /^[0-9]{10,11}$/; // V√≠ d·ª•: 10 ho·∫∑c 11 ch·ªØ s·ªë
    if (!phoneRegex.test(phone.trim())) {
      setMessage("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 10 ho·∫∑c 11 ch·ªØ s·ªë.");
      return;
    }

    try {
      const response = await fetch("http://localhost:5000/api/order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          customer,
          phone,
          address,
          payment_method: paymentMethod,
          total_money: totalPrice,
          cart_id: cartId,
          // C√≥ th·ªÉ th√™m account_id v√†o ƒë√¢y n·∫øu backend c·∫ßn, t√πy thu·ªôc v√†o API c·ªßa b·∫°n
          account_id: accountId, 
        }),
      });
      const data = await response.json();
      if (response.ok) {
        setMessage("ƒê·∫∑t h√†ng th√†nh c√¥ng! ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.");
        setCartItems([]);
        setCustomer("");
        setPhone("");
        setAddress("");
        setPaymentMethod("On delivery");
      } else {
        setMessage(data.message || "L·ªói khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói khi thanh to√°n:", error);
      setMessage("ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t h√†ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
    }
  };

  const totalPrice = cartItems.reduce(
    (sum, item) => sum + item.food.price * item.quantity,
    0
  );

  return (
    <div className={styles.cartContainer}>
      <h1 className={styles.cartTitle}>üõí Gi·ªè h√†ng c·ªßa b·∫°n</h1>
      {message && <p className={styles.message}>{message}</p>} {}

      {!cartItems.length ? (
        <p className={styles.emptyCart}>Gi·ªè h√†ng tr·ªëng.</p>
      ) : (
        <> {}
          <ul className={styles.cartList}>
            {cartItems.map((item) => (
              <li
                key={item._id}
                className={styles.cartItem}
              >
                <div className={styles.itemInfo}>
                  <Image
                    src={encodeImageUrl(item.food.img)}
                    alt={item.food.name}
                    width={80} // ƒê√£ thay ƒë·ªïi width/height ƒë·ªÉ ph√π h·ª£p v·ªõi CSS
                    height={80}
                    className={styles.itemImage}
                  />
                  <div>
                    <h2 className={styles.itemName}>{item.food.name}</h2>
                    <p className={styles.itemPrice}>
                      {item.food.price.toLocaleString()}ƒë
                    </p>
                  </div>
                </div>
                <div className={styles.itemActions}>
                  <button
                    onClick={() => handleUpdate(item._id, item.quantity - 1)}
                    className={styles.quantityButton}
                    disabled={item.quantity <= 1} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu s·ªë l∆∞·ª£ng l√† 1
                  >
                    -
                  </button>
                  <span className={styles.itemQuantity}>{item.quantity}</span>
                  <button
                    onClick={() => handleUpdate(item._id, item.quantity + 1)}
                    className={styles.quantityButton}
                  >
                    +
                  </button>
                  <button
                    onClick={() => handleDelete(item._id)}
                    className={styles.deleteButton}
                  >
                    X√≥a
                  </button>
                </div>
              </li>
            ))}
          </ul>
          
          {/* Ph·∫ßn th√¥ng tin giao h√†ng */}
          <div className={styles.checkoutFormSection}>
            <h3>Th√¥ng tin giao h√†ng</h3>
            <input
              type="text"
              placeholder="T√™n kh√°ch h√†ng"
              value={customer}
              onChange={(e) => setCustomer(e.target.value)}
              className={styles.formInput}
              required
            />
            <input
              type="text"
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className={styles.formInput}
              required
            />
            <input
              type="text"
              placeholder="ƒê·ªãa ch·ªâ giao h√†ng"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className={styles.formInput}
              required
            />
            <select
              value={paymentMethod}
              onChange={(e) => setPaymentMethod(e.target.value)}
              className={styles.formSelect}
            >
              <option value="On delivery">Thanh to√°n khi nh·∫≠n h√†ng</option>
              <option value="Online">Thanh to√°n online (Ch∆∞a h·ªó tr·ª£)</option>
            </select>
          </div>

          <div className={styles.totalPriceSection}>
            T·ªïng ti·ªÅn: {totalPrice.toLocaleString()}ƒë
          </div>
          <button
            onClick={handleCheckout}
            className={styles.checkoutButton}
          >
            Thanh to√°n
          </button>
        </>
      )}
    </div>
  );
}