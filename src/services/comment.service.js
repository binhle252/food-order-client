import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:5000/api", // C·∫≠p nh·∫≠t n·∫øu c·∫ßn
});

// Th√™m token v√†o headers n·∫øu c√≥ (d√πng cho m·ªçi request c·∫ßn x√°c th·ª±c)
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

/* ================================
 * üìå 1. T·∫°o b√¨nh lu·∫≠n (user)
 * ================================ */
export async function createComment({ foodId, content }) {
  try {
    const res = await api.post("/comments", { foodId, content });
    return res.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o b√¨nh lu·∫≠n:", error.response?.data?.message || error.message);
    throw error;
  }
}

/* ==========================================
 * üìå 2. L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n theo m√≥n ƒÉn (user)
 * ========================================== */
export async function getCommentsByFood(foodId) {
  try {
    const res = await api.get(`/comments/${foodId}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√¨nh lu·∫≠n theo m√≥n ƒÉn:", error.response?.data?.message || error.message);
    throw error;
  }
}

/* ==========================================
 * üìå 3. L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n (admin)
 * ========================================== */
export async function getComments() {
  try {
    const res = await api.get("/comments");
    return res.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n:", error.response?.data?.message || error.message);
    throw error;
  }
}

/* ==========================================
 * üìå 4. X√≥a b√¨nh lu·∫≠n theo ID (admin)
 * ========================================== */
export async function deleteComment(commentId) {
  try {
    const res = await api.delete(`/comments/${commentId}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a b√¨nh lu·∫≠n:", error.response?.data?.message || error.message);
    throw error;
  }
}
